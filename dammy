#!/bin/bash

set -Ceu

SCRIPT_FILE_NAME=$(basename $0)
SCRIPT_NAME=${SCRIPT_FILE_NAME%.*}
SELF=$(cd $(dirname $0); pwd)
LOGGING=false
VERSION="1.3.0"
SEPARATER='---------------------------'

function _usage() {
    echo "Usage: ${SCRIPT_NAME} [OPTIONS] [DESTNATION]..."
    echo "  This script creates various files."
    echo
    echo "Options:"
    echo "  -h, --help                     Show help"
    echo "  -v, --version                  Show script version"
#    echo "  -a, --long-a ARG               Option which must have argument"
#    echo "  -b, --long-b [ARG]             Either with or without argument is possible"
    echo "  -n, --number                   Specify the number of files to create"
    echo "  -e, --ext                      Specify the extension of the file to be created"
    echo "      --with-whitespace          Contain whitespace characters"
    echo "      --no-symbol                Contain symbol characters"
    echo "      --each                     Create a file in the specified intermediate directory"
    echo "      --cold-run                 Run script as test running"
    echo "      --verbose                  Print various logging information"
    echo
    echo "Example"
    echo "  dammy -n 3 -e jpg              Generate three **.jpg in current directory"
    echo "  dammy -e jpg xx/yy             Create ./xx/yy directory and generate a **.jpg"
    echo "                                 in ./xx/yy dir."
    echo "  dammy xx/yy{00..02}            Create ./xx/yy01, ./xx/yy02 and ./xx/yy02 directory"
    echo "                                 and then generate **.txt in each dir. created"
    exit 0
}

function _log() {
    ${LOGGING} && echo "$@" || return 0
}

function _err() {
    echo "[ERR] $1" && exit 1
}

function _args_count() {
    echo ${#ARG_VALUES[@]}
}

function _is_exist() {
    [ -f $1 ] || [ -d $1 ] || [[ $(type $1) ]]
}

# -------------------------------------------------------------

function _verbose() {
    _log "DIRS: ${DIRS[@]}"
    _log "OUT_FILE_EXT: ${OUT_FILE_EXT}"
    _log "OUT_FILE_NUMBER: ${OUT_FILE_NUMBER}"
    _log "WITH_WHITESPACE: ${WITH_WHITESPACE}"
    _log "IS_NO_SYMBOL: ${IS_NO_SYMBOL}"
    _log "IS_EACH: ${IS_EACH}"
    _log "IS_COLD_RUN: ${IS_COLD_RUN}"
    _log "${SEPARATER}"
}

ARG_VALUES=()
DIRS=()
OUT_FILE_EXT='txt'
OUT_FILE_NUMBER=1
WITH_WHITESPACE=false
IS_NO_SYMBOL=false
IS_EACH=false
IS_COLD_RUN=false

TMP_DIR=''

# $1: output directory
function _create_files() {
    local destination=$1

#    while read -r random_str; do
#        mkdir -p ${destination} && {
#            touch ${destination}/${random_str}.${OUT_FILE_EXT}
#            ${IS_COLD_RUN} || _log "created: ${destination}/${random_str}.${OUT_FILE_EXT}"
#        }
#    done < <(dazai -n ${OUT_FILE_NUMBER} han -d '\n' -l 8 --no-symbol)

    set -f
    for i in $(seq ${OUT_FILE_NUMBER}); do
        local seed='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
        ${IS_NO_SYMBOL} || seed+="._-~%!$&'\()*+,;=:@"

        ${WITH_WHITESPACE} && local char_count=5 || local char_count=10
        local random_str=$(echo ${seed} \
                            | fold -w 1 \
                            | shuf -n ${char_count} \
                            | tr '\n' ' ')
        ${WITH_WHITESPACE} || random_str=$(echo ${random_str} | sed 's/ //g')

        mkdir -p "${destination}" && {
            touch "${destination}/${random_str}.${OUT_FILE_EXT}"
            ${IS_COLD_RUN} || _log "created: ${destination}/${random_str}.${OUT_FILE_EXT}"
        }
    done
    set +f
}

function _main() {
    ${IS_COLD_RUN} && TMP_DIR=$(mktemp -d -t ${SCRIPT_NAME})
    trap "[ -e ${TMP_DIR} ] && rm -rf ${TMP_DIR}" 1 2 3 15

    # create file / directories
    for dir in ${DIRS[@]}; do
        ${IS_COLD_RUN} && dir=${TMP_DIR}/${dir}
        _create_files ${dir}

        # for --each option
        ${IS_EACH} && [ ${dir} != '.' ] && {

            # Determine the depth of the directory hierarchy by the number of '/'.
            num=$(echo -n ${dir} \
                | sed "s:${TMP_DIR}/::" \
                | sed 's:[^/]::g' | wc -c \
            )

            [ ${num} -eq 0 ] && continue

            for i in $(seq ${num}); do
                dir=${dir%/*}
                _create_files ${dir}
            done
        }
    done

    # post process of the --cold-run option
    if [ ! -z ${TMP_DIR} ]; then
        tree ${TMP_DIR} | sed "s:${TMP_DIR}:.:"
        rm -rf ${TMP_DIR}
    fi
}

# -------------------------------------------------------------

function _analyze_args_and_options() {
    while (( $# > 0 )); do
        case $1 in
            -h | --help)
                _usage
                exit 1
                ;;
            -v | --version)
                echo ${SCRIPT_NAME} v${VERSION}
                exit 0
                ;;
            --verbose)
                LOGGING=true
                shift
                ;;

            # Must have argument
            -n | --number)
                set +u
                if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                    _err "-n option requires n value."
                fi
                set -u
                OUT_FILE_NUMBER=$2
                shift 2
                ;;

            # Must have argument
            -e | --ext)
                set +u
                    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                        _err "-e option requires a value."
                    fi
                set -u
                OUT_FILE_EXT=$2
                shift 2
                ;;

#            # Either with or without argument is possible
#            -b | --long-b)
#                set +u
#                if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
#                    shift
#                else
#                    OPT_B=$2
#                    shift 2
#                fi
#                set -u
#                ;;

#            # no argument
#            -s | --symbol)
#                IS_NO_SYMBOL=true
#                shift 1
#                ;;

            # after this all args include '-xx', will treat arg value
            -- | -)
                shift 1
                ARG_VALUES+=( "$@" )
                break
                ;;

            # for true or false flags, no argument
            --*)
                if [[ "$1" =~ 'cold-run' ]]; then
                    IS_COLD_RUN='true'
                fi
                if [[ "$1" =~ 'each' ]]; then
                    IS_EACH='true'
                fi
                if [[ "$1" =~ 'with-whitespace' ]]; then
                    WITH_WHITESPACE='true'
                fi
                if [[ "$1" =~ 'no-symbol' ]]; then
                    IS_NO_SYMBOL='true'
                fi
                shift
                ;;

#            # for true or false flags, no argument
#            -*)
#                if [[ "$1" =~ 's' ]]; then
#                    WITH_SPACE='true'
#                fi
#                shift
#                ;;

            # arguments
            *)
                ARG_VALUES+=("$1")
                shift
                ;;
        esac
    done
}

function _set_global_var() {
    : ${ARG_VALUES:=.}
    for i in ${ARG_VALUES[@]}; do
        [ ${i} = '/' ] && DIRS+=(' /') && continue
        DIRS+=($(echo ${i} | sed 's:/$::'))
    done
}

function _verify_global_var() {
    _verify_output_dirs
}

function _verify_output_dirs() {
    for i in ${DIRS[@]}; do
        if [[ "${i:0:1}" = '/' ]]; then
            _err "Directories should be specified as relative paths."
        fi
        if [[ ! "$(pwd)/${i}" =~ "${HOME}" ]]; then
            _err "${i} is not under your HOME directory."
        fi
        if [[ "$(pwd)/${i}" =~ '../' ]]; then
            _err "Containing ../ in output directory is restricted."
        fi
    done
}

# -------------------------------------------------------------
# Main Routine
# -------------------------------------------------------------
_analyze_args_and_options $@ && {
    _set_global_var && _verify_global_var && {
        _verbose
        _log 'start main process..' && _log "${SEPARATER}"
        _main
    }
}

exit 0
