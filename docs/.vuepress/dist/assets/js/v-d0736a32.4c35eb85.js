"use strict";(self.webpackChunkdammy=self.webpackChunkdammy||[]).push([[988],{2485:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-d0736a32",path:"/usage/",title:"Usage",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Generating a file",slug:"generating-a-file",children:[{level:3,title:"Number of files to generate",slug:"number-of-files-to-generate",children:[]},{level:3,title:"Extension of the generated file",slug:"extension-of-the-generated-file",children:[]},{level:3,title:"Symbol-free file names",slug:"symbol-free-file-names",children:[]},{level:3,title:"File names with whitespace",slug:"file-names-with-whitespace",children:[]}]},{level:2,title:"Creating a directory",slug:"creating-a-directory",children:[{level:3,title:"Multiple Directories",slug:"multiple-directories",children:[]},{level:3,title:"Nesting",slug:"nesting",children:[]}]},{level:2,title:"Shell brace expansion.",slug:"shell-brace-expansion",children:[]},{level:2,title:"cold run",slug:"cold-run",children:[]},{level:2,title:"Options",slug:"options",children:[]}],filePathRelative:"usage/README.md",git:{updatedTime:1637731809e3,contributors:[{name:"ontheroadjp",email:"dev@ontheroad.jp",commits:1}]}}},5503:(n,s,e)=>{e.r(s),e.d(s,{default:()=>t});const a=(0,e(6252).uE)('<h1 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h1><p>If you haven&#39;t installed it yet, please do so first.</p><p>After the installation is complete, let&#39;s try using dammy.</p><h2 id="generating-a-file" tabindex="-1"><a class="header-anchor" href="#generating-a-file" aria-hidden="true">#</a> Generating a file</h2><p>When the dammy command is executed, a dummy file will be created in the directory where it was executed.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy\n$ tree\n<span class="token builtin class-name">.</span>\n└── 0hi<span class="token punctuation">)</span>_mB.wf.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="number-of-files-to-generate" tabindex="-1"><a class="header-anchor" href="#number-of-files-to-generate" aria-hidden="true">#</a> Number of files to generate</h3><p>The number of files to be generated can be changed with the <code>-n</code> option.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy -n <span class="token number">3</span>\n$ tree\n<span class="token builtin class-name">.</span>\n├── <span class="token variable">$qxT2</span>+_&#39;uW.txt\n├── pdK:gXwu.Q.txt\n└── tl4NUT<span class="token punctuation">(</span>q7b.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="extension-of-the-generated-file" tabindex="-1"><a class="header-anchor" href="#extension-of-the-generated-file" aria-hidden="true">#</a> Extension of the generated file</h3><p>You can change the extension of the generated file by adding the <code>-e</code> option.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy -n <span class="token number">3</span> -e jpg\n$ tree\n<span class="token builtin class-name">.</span>\n├── <span class="token punctuation">;</span>mSu179.QE.jpg\n├── JGElYbT3d<span class="token punctuation">\\</span>.jpg\n└── tyP+<span class="token punctuation">\\</span>woXGQ.jpg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="symbol-free-file-names" tabindex="-1"><a class="header-anchor" href="#symbol-free-file-names" aria-hidden="true">#</a> Symbol-free file names</h3><p>By giving the <code>--no-symbol</code> option, files are generated with file names that do not contain symbols.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy -n <span class="token number">3</span> --no-symbol\n$ tree\n<span class="token builtin class-name">.</span>\n├── Q5aocxH9uI.txt\n├── TfxZIic3Rg.txt\n└── ucmiz657Ae.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="file-names-with-whitespace" tabindex="-1"><a class="header-anchor" href="#file-names-with-whitespace" aria-hidden="true">#</a> File names with whitespace</h3><p>The <code>--with-whitespace</code> option is used to generate files with whitespace in the file name.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy -n <span class="token number">3</span> --with-whitespace\n$ tree\n<span class="token builtin class-name">.</span>\n├── J L $ A <span class="token punctuation">(</span> .txt\n├── T w N V c .txt\n└── V n <span class="token number">0</span> <span class="token punctuation">)</span> Z .txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="creating-a-directory" tabindex="-1"><a class="header-anchor" href="#creating-a-directory" aria-hidden="true">#</a> Creating a directory</h2><p>When you pass the argument to <code>dammy</code>, a directory will be created and a file will be created in it.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge\n$ tree\n<span class="token builtin class-name">.</span>\n└── hoge\n    └── YQ_7eEW5bH.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>It is not possible to generate only directories. If you want to generate only a directory, use mkdir.</p><p>:::TIP Of course, the <code>-e</code> and <code>-n</code> options can be used together. :::</p><h3 id="multiple-directories" tabindex="-1"><a class="header-anchor" href="#multiple-directories" aria-hidden="true">#</a> Multiple Directories</h3><p>It is also possible to create multiple directories at the same time.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge foo bar\n$ tree\n<span class="token builtin class-name">.</span>\n├── bar\n│   └── J<span class="token punctuation">(</span>q<span class="token operator">=</span>E.@Ma0.txt\n├── foo\n│   └── x<span class="token operator">&amp;</span>bY,2s<span class="token punctuation">)</span>qg.txt\n└── hoge\n    └── 9BcTRkOgLw.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="nesting" tabindex="-1"><a class="header-anchor" href="#nesting" aria-hidden="true">#</a> Nesting</h3><p>Directories can be nested. There is no need to create the directories in advance.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge/foo/bar\ntree\n<span class="token builtin class-name">.</span>\n└── hoge\n    └── foo\n        └── bar\n            └── :w9a@DmC~N.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>When the --each option is given, a file will be created in each directory.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge/foo/bar --each\n$ tree\n<span class="token builtin class-name">.</span>\n└── hoge\n    ├── foo\n    │   ├── <span class="token operator">&amp;</span>dGzWh<span class="token operator">!</span>F2f.txt\n    │   └── bar\n    │       └── %<span class="token punctuation">\\</span>&#39;fRw2z,h.txt\n    └── yLv*lTz<span class="token punctuation">\\</span>BG.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="shell-brace-expansion" tabindex="-1"><a class="header-anchor" href="#shell-brace-expansion" aria-hidden="true">#</a> Shell brace expansion.</h2><p><code>dammy</code> can also be combined with brace expansion of the shell.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge/<span class="token punctuation">{</span>foo,bar<span class="token punctuation">}</span>/piyo\n$ tree\n<span class="token builtin class-name">.</span>\n└── hoge\n    ├── bar\n    │   └── piyo\n    │       └── ey<span class="token punctuation">\\</span>%lAFx2V.txt\n    └── foo\n        └── piyo\n            └── 9k~MYXwoH<span class="token operator">!</span>.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="cold-run" tabindex="-1"><a class="header-anchor" href="#cold-run" aria-hidden="true">#</a> cold run</h2><p>When the <code>--cold-run</code> option is given, no files/directories are actually created.</p><p>Instead, the contents of the directory tree that would be generated without the <code>--cold-run</code> option will be displayed.</p><p>If there are no problems, just remove the <code>--cold-run</code> option and run the dammy command.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge/<span class="token punctuation">{</span>foo,bar<span class="token punctuation">}</span>/piyo --each -n <span class="token number">3</span> --cold-run\n<span class="token builtin class-name">.</span>\n└── hoge\n    ├── +_60SaTUoh.txt\n    ├── COrDP*WZ2X.txt\n    ├── S:0myGYPX<span class="token punctuation">(</span>.txt\n    ├── bar\n    │   ├── <span class="token number">9</span><span class="token punctuation">\\</span><span class="token punctuation">\\</span><span class="token operator">=</span>o7y5<span class="token punctuation">)</span>:e.txt\n    │   ├── CJso1@z<span class="token punctuation">)</span>ZD.txt\n    │   ├── Lg7<span class="token punctuation">)</span>ruOtbH.txt\n    │   └── piyo\n    │       ├── <span class="token operator">&amp;</span>:u-BmLSa3.txt\n    │       ├── _j,eoIl1nZ.txt\n    │       └── gd,5xhU<span class="token punctuation">(</span><span class="token operator">!</span>o.txt\n    ├── d6g.pTULy9.txt\n    ├── foo\n    │   ├── 0A<span class="token punctuation">)</span>T<span class="token operator">=</span>qK@Uh.txt\n    │   ├── R8*.40<span class="token punctuation">;</span>B_u.txt\n    │   ├── kd$%K,<span class="token punctuation">)</span>24l.txt\n    │   └── piyo\n    │       ├── <span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">\\</span>3p0ibK1S.txt\n    │       ├── B0dGSQxzmv.txt\n    │       └── ~L3<span class="token punctuation">\\</span><span class="token punctuation">\\</span>SGc<span class="token variable">$X9</span>.txt\n    ├── n<span class="token punctuation">(</span>x5@_alTr.txt\n    └── nCH:qsx<span class="token punctuation">\\</span><span class="token punctuation">\\</span><span class="token punctuation">(</span>f.txt\n\n<span class="token number">5</span> directories, <span class="token number">18</span> files\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Options:\n  -h, --help                     Show <span class="token builtin class-name">help</span>\n  -v, --version                  Show script version\n  -n, --number                   Specify the number of files to create\n  -e, --ext                      Specify the extension of the <span class="token function">file</span> to be created\n      --with-whitespace          Contain whitespace characters\n      --no-symbol                Contain symbol characters\n      --each                     Create a <span class="token function">file</span> <span class="token keyword">in</span> the specified intermediate directory\n      --cold-run                 Run script as <span class="token builtin class-name">test</span> running\n      --verbose                  Print various logging information\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',41),l={},t=(0,e(3744).Z)(l,[["render",function(n,s){return a}]])},3744:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);