"use strict";(self.webpackChunkdammy=self.webpackChunkdammy||[]).push([[152],{6573:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-438a63ad",path:"/ja/usage/",title:"使い方",lang:"ja-JP",frontmatter:{},excerpt:"",headers:[{level:2,title:"ファイルの生成",slug:"ファイルの生成",children:[{level:3,title:"生成するファイルの数",slug:"生成するファイルの数",children:[]},{level:3,title:"生成するファイルの拡張子",slug:"生成するファイルの拡張子",children:[]},{level:3,title:"記号なしファイル名",slug:"記号なしファイル名",children:[]},{level:3,title:"空白入りファイル名",slug:"空白入りファイル名",children:[]}]},{level:2,title:"ディレクトリの生成",slug:"ディレクトリの生成",children:[{level:3,title:"複数のディレクトリ",slug:"複数のディレクトリ",children:[]},{level:3,title:"入れ子にする",slug:"入れ子にする",children:[]}]},{level:2,title:"シェルのブレース展開",slug:"シェルのブレース展開",children:[]},{level:2,title:"cold run",slug:"cold-run",children:[]},{level:2,title:"オプション一覧",slug:"オプション一覧",children:[]}],filePathRelative:"ja/usage/README.md",git:{updatedTime:1637731809e3,contributors:[{name:"ontheroadjp",email:"dev@ontheroad.jp",commits:1}]}}},8544:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="使い方" tabindex="-1"><a class="header-anchor" href="#使い方" aria-hidden="true">#</a> 使い方</h1><p>インストールが済んでいない場合は、先にインストールをしてください。</p><p>インストールが完了したら早速 <code>dammy</code> を使ってみましょう。</p><h2 id="ファイルの生成" tabindex="-1"><a class="header-anchor" href="#ファイルの生成" aria-hidden="true">#</a> ファイルの生成</h2><p><code>dammy</code> コマンドを実行すると、実行したディレクトリにダミーファイルが1つ生成されます。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy\n$ tree\n<span class="token builtin class-name">.</span>\n└── 0hi<span class="token punctuation">)</span>_mB.wf.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="生成するファイルの数" tabindex="-1"><a class="header-anchor" href="#生成するファイルの数" aria-hidden="true">#</a> 生成するファイルの数</h3><p><code>-n</code> オプションを付与すると生成するファイル数を変更できます。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy -n <span class="token number">3</span>\n$ tree\n<span class="token builtin class-name">.</span>\n├── <span class="token variable">$qxT2</span>+_&#39;uW.txt\n├── pdK:gXwu.Q.txt\n└── tl4NUT<span class="token punctuation">(</span>q7b.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="生成するファイルの拡張子" tabindex="-1"><a class="header-anchor" href="#生成するファイルの拡張子" aria-hidden="true">#</a> 生成するファイルの拡張子</h3><p><code>-e</code> オプションを付与することによって生成されるファイルの拡張子を変更できます。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy -n <span class="token number">3</span> -e jpg\n$ tree\n<span class="token builtin class-name">.</span>\n├── <span class="token punctuation">;</span>mSu179.QE.jpg\n├── JGElYbT3d<span class="token punctuation">\\</span>.jpg\n└── tyP+<span class="token punctuation">\\</span>woXGQ.jpg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="記号なしファイル名" tabindex="-1"><a class="header-anchor" href="#記号なしファイル名" aria-hidden="true">#</a> 記号なしファイル名</h3><p><code>--no-symbol</code> オプションを付与することによって、記号を含まないファイル名でファイルを生成します。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy -n <span class="token number">3</span> --no-symbol\n$ tree\n<span class="token builtin class-name">.</span>\n├── Q5aocxH9uI.txt\n├── TfxZIic3Rg.txt\n└── ucmiz657Ae.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="空白入りファイル名" tabindex="-1"><a class="header-anchor" href="#空白入りファイル名" aria-hidden="true">#</a> 空白入りファイル名</h3><p><code>--with-whitespace</code> オプションを付与することによって空白入りのファイル名でファイルを生成します。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy -n <span class="token number">3</span> --with-whitespace\n$ tree\n<span class="token builtin class-name">.</span>\n├── J L $ A <span class="token punctuation">(</span> .txt\n├── T w N V c .txt\n└── V n <span class="token number">0</span> <span class="token punctuation">)</span> Z .txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="ディレクトリの生成" tabindex="-1"><a class="header-anchor" href="#ディレクトリの生成" aria-hidden="true">#</a> ディレクトリの生成</h2><p><code>dammy</code> に引数を渡すとディレクトリが作成されて、その中にファイルが1つ生成されます。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge\n$ tree\n<span class="token builtin class-name">.</span>\n└── hoge\n    └── YQ_7eEW5bH.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>ディレクトリのみを生成することはできません。ディレクトリのみを生成したい場合は <code>mkdir</code> を使ってください。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>もちろん <code>-e</code> オプションや <code>-n</code> オプションを併用することが可能です。</p></div><h3 id="複数のディレクトリ" tabindex="-1"><a class="header-anchor" href="#複数のディレクトリ" aria-hidden="true">#</a> 複数のディレクトリ</h3><p>同時に複数のディレクトリを生成することもできます。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge foo bar\n$ tree\n<span class="token builtin class-name">.</span>\n├── bar\n│   └── J<span class="token punctuation">(</span>q<span class="token operator">=</span>E.@Ma0.txt\n├── foo\n│   └── x<span class="token operator">&amp;</span>bY,2s<span class="token punctuation">)</span>qg.txt\n└── hoge\n    └── 9BcTRkOgLw.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="入れ子にする" tabindex="-1"><a class="header-anchor" href="#入れ子にする" aria-hidden="true">#</a> 入れ子にする</h3><p>ディレクトリは入れ子に出来ます。事前にディレクトリを生成する必要はありません。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge/foo/bar\ntree\n<span class="token builtin class-name">.</span>\n└── hoge\n    └── foo\n        └── bar\n            └── :w9a@DmC~N.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>--each</code> オプションを付与すると、それぞれのディレクトリにファイルが作成されます。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge/foo/bar --each\n$ tree\n<span class="token builtin class-name">.</span>\n└── hoge\n    ├── foo\n    │   ├── <span class="token operator">&amp;</span>dGzWh<span class="token operator">!</span>F2f.txt\n    │   └── bar\n    │       └── %<span class="token punctuation">\\</span>&#39;fRw2z,h.txt\n    └── yLv*lTz<span class="token punctuation">\\</span>BG.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="シェルのブレース展開" tabindex="-1"><a class="header-anchor" href="#シェルのブレース展開" aria-hidden="true">#</a> シェルのブレース展開</h2><p>dammy はシェルのブレース展開と組み合わせることも可能です。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge/<span class="token punctuation">{</span>foo,bar<span class="token punctuation">}</span>/piyo\n$ tree\n<span class="token builtin class-name">.</span>\n└── hoge\n    ├── bar\n    │   └── piyo\n    │       └── ey<span class="token punctuation">\\</span>%lAFx2V.txt\n    └── foo\n        └── piyo\n            └── 9k~MYXwoH<span class="token operator">!</span>.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="cold-run" tabindex="-1"><a class="header-anchor" href="#cold-run" aria-hidden="true">#</a> cold run</h2><p><code>--cold-run</code> オプションを付与すると、実際にファイル/ディレクトリは生成されません。</p><p>その代わりに <code>--cold-run</code> オプションを付与しなかった場合に生成されるディレクトリツリーの内容が表示されます。</p><p>問題がなければ、<code>--cold-run</code> オプションだけを外して <code>dammy</code> コマンドを実行してください。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ dammy hoge/<span class="token punctuation">{</span>foo,bar<span class="token punctuation">}</span>/piyo --each -n <span class="token number">3</span> --cold-run\n<span class="token builtin class-name">.</span>\n└── hoge\n    ├── +_60SaTUoh.txt\n    ├── COrDP*WZ2X.txt\n    ├── S:0myGYPX<span class="token punctuation">(</span>.txt\n    ├── bar\n    │   ├── <span class="token number">9</span><span class="token punctuation">\\</span><span class="token punctuation">\\</span><span class="token operator">=</span>o7y5<span class="token punctuation">)</span>:e.txt\n    │   ├── CJso1@z<span class="token punctuation">)</span>ZD.txt\n    │   ├── Lg7<span class="token punctuation">)</span>ruOtbH.txt\n    │   └── piyo\n    │       ├── <span class="token operator">&amp;</span>:u-BmLSa3.txt\n    │       ├── _j,eoIl1nZ.txt\n    │       └── gd,5xhU<span class="token punctuation">(</span><span class="token operator">!</span>o.txt\n    ├── d6g.pTULy9.txt\n    ├── foo\n    │   ├── 0A<span class="token punctuation">)</span>T<span class="token operator">=</span>qK@Uh.txt\n    │   ├── R8*.40<span class="token punctuation">;</span>B_u.txt\n    │   ├── kd$%K,<span class="token punctuation">)</span>24l.txt\n    │   └── piyo\n    │       ├── <span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">\\</span>3p0ibK1S.txt\n    │       ├── B0dGSQxzmv.txt\n    │       └── ~L3<span class="token punctuation">\\</span><span class="token punctuation">\\</span>SGc<span class="token variable">$X9</span>.txt\n    ├── n<span class="token punctuation">(</span>x5@_alTr.txt\n    └── nCH:qsx<span class="token punctuation">\\</span><span class="token punctuation">\\</span><span class="token punctuation">(</span>f.txt\n\n<span class="token number">5</span> directories, <span class="token number">18</span> files\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="オプション一覧" tabindex="-1"><a class="header-anchor" href="#オプション一覧" aria-hidden="true">#</a> オプション一覧</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Options:\n  -h, --help                     ヘルプを表示します\n  -v, --version                  バージョンを表示します\n  -n, --number                   生成するファイル数を指定します\n  -e, --ext                      生成するファイル拡張子を指定します\n      --with-whitespace          空白文字入りのファイル名でファイルを生成します\n      --no-symbol                記号を含まないファイル名でファイルを生成します\n      --each                     全ての階層にファイルを生成します\n      --cold-run                 コールドランで実行します\n      --verbose                  デバッグ情報を出力します\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',41),l={},p=(0,a(3744).Z)(l,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);